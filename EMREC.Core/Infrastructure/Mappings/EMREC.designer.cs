#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMREC.Core.Infrastructure.Mappings
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="mpl")]
	public partial class EMRECDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblPatient(tblPatient instance);
    partial void UpdatetblPatient(tblPatient instance);
    partial void DeletetblPatient(tblPatient instance);
    partial void InserttblPhysician(tblPhysician instance);
    partial void UpdatetblPhysician(tblPhysician instance);
    partial void DeletetblPhysician(tblPhysician instance);
    partial void InserttblVisit(tblVisit instance);
    partial void UpdatetblVisit(tblVisit instance);
    partial void DeletetblVisit(tblVisit instance);
    partial void InserttlbDocumentType(tlbDocumentType instance);
    partial void UpdatetlbDocumentType(tlbDocumentType instance);
    partial void DeletetlbDocumentType(tlbDocumentType instance);
    partial void InserttblDocument(tblDocument instance);
    partial void UpdatetblDocument(tblDocument instance);
    partial void DeletetblDocument(tblDocument instance);
    #endregion
		
		public EMRECDataContext() : 
				base(global::EMREC.Core.Properties.Settings.Default.mplConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EMRECDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EMRECDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EMRECDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EMRECDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblDocumentView> tblDocumentViews
		{
			get
			{
				return this.GetTable<tblDocumentView>();
			}
		}
		
		public System.Data.Linq.Table<tblPatient> tblPatients
		{
			get
			{
				return this.GetTable<tblPatient>();
			}
		}
		
		public System.Data.Linq.Table<tblPhysician> tblPhysicians
		{
			get
			{
				return this.GetTable<tblPhysician>();
			}
		}
		
		public System.Data.Linq.Table<tblQualityControl> tblQualityControls
		{
			get
			{
				return this.GetTable<tblQualityControl>();
			}
		}
		
		public System.Data.Linq.Table<tblVisit> tblVisits
		{
			get
			{
				return this.GetTable<tblVisit>();
			}
		}
		
		public System.Data.Linq.Table<tlbDocumentType> tlbDocumentTypes
		{
			get
			{
				return this.GetTable<tlbDocumentType>();
			}
		}
		
		public System.Data.Linq.Table<tblDocument> tblDocuments
		{
			get
			{
				return this.GetTable<tblDocument>();
			}
		}
		
		public System.Data.Linq.Table<tblConfigPath> tblConfigPaths
		{
			get
			{
				return this.GetTable<tblConfigPath>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDocumentViews")]
	public partial class tblDocumentView
	{
		
		private int _DocumentId;
		
		private System.DateTime _DateViewed;
		
		public tblDocumentView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentId", DbType="Int NOT NULL")]
		public int DocumentId
		{
			get
			{
				return this._DocumentId;
			}
			set
			{
				if ((this._DocumentId != value))
				{
					this._DocumentId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateViewed", DbType="Date NOT NULL")]
		public System.DateTime DateViewed
		{
			get
			{
				return this._DateViewed;
			}
			set
			{
				if ((this._DateViewed != value))
				{
					this._DateViewed = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPatient")]
	public partial class tblPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private string _ChartID;
		
		private System.Nullable<int> _PrescriberID;
		
		private string _PatientLastName;
		
		private string _PatientFirstName;
		
		private string _PatientMiddleName;
		
		private System.DateTime _DOB;
		
		private string _Sex;
		
		private string _PolicyNumber;
		
		private System.Nullable<System.DateTime> _InactiveDate;
		
		private System.Nullable<bool> _Active;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Phone;
		
		private string _MaritalStatus;
		
		private string _INS1;
		
		private string _GroupID;
		
		private string _MemberID;
		
		private EntitySet<tblVisit> _tblVisits;
		
		private EntityRef<tblPhysician> _tblPhysician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnChartIDChanging(string value);
    partial void OnChartIDChanged();
    partial void OnPrescriberIDChanging(System.Nullable<int> value);
    partial void OnPrescriberIDChanged();
    partial void OnPatientLastNameChanging(string value);
    partial void OnPatientLastNameChanged();
    partial void OnPatientFirstNameChanging(string value);
    partial void OnPatientFirstNameChanged();
    partial void OnPatientMiddleNameChanging(string value);
    partial void OnPatientMiddleNameChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnPolicyNumberChanging(string value);
    partial void OnPolicyNumberChanged();
    partial void OnInactiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInactiveDateChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMaritalStatusChanging(string value);
    partial void OnMaritalStatusChanged();
    partial void OnINS1Changing(string value);
    partial void OnINS1Changed();
    partial void OnGroupIDChanging(string value);
    partial void OnGroupIDChanged();
    partial void OnMemberIDChanging(string value);
    partial void OnMemberIDChanged();
    #endregion
		
		public tblPatient()
		{
			this._tblVisits = new EntitySet<tblVisit>(new Action<tblVisit>(this.attach_tblVisits), new Action<tblVisit>(this.detach_tblVisits));
			this._tblPhysician = default(EntityRef<tblPhysician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ChartID
		{
			get
			{
				return this._ChartID;
			}
			set
			{
				if ((this._ChartID != value))
				{
					this.OnChartIDChanging(value);
					this.SendPropertyChanging();
					this._ChartID = value;
					this.SendPropertyChanged("ChartID");
					this.OnChartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriberID", DbType="Int")]
		public System.Nullable<int> PrescriberID
		{
			get
			{
				return this._PrescriberID;
			}
			set
			{
				if ((this._PrescriberID != value))
				{
					if (this._tblPhysician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriberIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriberID = value;
					this.SendPropertyChanged("PrescriberID");
					this.OnPrescriberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientLastName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PatientLastName
		{
			get
			{
				return this._PatientLastName;
			}
			set
			{
				if ((this._PatientLastName != value))
				{
					this.OnPatientLastNameChanging(value);
					this.SendPropertyChanging();
					this._PatientLastName = value;
					this.SendPropertyChanged("PatientLastName");
					this.OnPatientLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientFirstName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PatientFirstName
		{
			get
			{
				return this._PatientFirstName;
			}
			set
			{
				if ((this._PatientFirstName != value))
				{
					this.OnPatientFirstNameChanging(value);
					this.SendPropertyChanging();
					this._PatientFirstName = value;
					this.SendPropertyChanged("PatientFirstName");
					this.OnPatientFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientMiddleName", DbType="VarChar(10)")]
		public string PatientMiddleName
		{
			get
			{
				return this._PatientMiddleName;
			}
			set
			{
				if ((this._PatientMiddleName != value))
				{
					this.OnPatientMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._PatientMiddleName = value;
					this.SendPropertyChanged("PatientMiddleName");
					this.OnPatientMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyNumber", DbType="VarChar(25)")]
		public string PolicyNumber
		{
			get
			{
				return this._PolicyNumber;
			}
			set
			{
				if ((this._PolicyNumber != value))
				{
					this.OnPolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._PolicyNumber = value;
					this.SendPropertyChanged("PolicyNumber");
					this.OnPolicyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InactiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InactiveDate
		{
			get
			{
				return this._InactiveDate;
			}
			set
			{
				if ((this._InactiveDate != value))
				{
					this.OnInactiveDateChanging(value);
					this.SendPropertyChanging();
					this._InactiveDate = value;
					this.SendPropertyChanged("InactiveDate");
					this.OnInactiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(35) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(35)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(11)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(14)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatus", DbType="VarChar(2)")]
		public string MaritalStatus
		{
			get
			{
				return this._MaritalStatus;
			}
			set
			{
				if ((this._MaritalStatus != value))
				{
					this.OnMaritalStatusChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatus = value;
					this.SendPropertyChanged("MaritalStatus");
					this.OnMaritalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INS1", DbType="VarChar(5)")]
		public string INS1
		{
			get
			{
				return this._INS1;
			}
			set
			{
				if ((this._INS1 != value))
				{
					this.OnINS1Changing(value);
					this.SendPropertyChanging();
					this._INS1 = value;
					this.SendPropertyChanged("INS1");
					this.OnINS1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="VarChar(32)")]
		public string GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="VarChar(35)")]
		public string MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblVisit", Storage="_tblVisits", ThisKey="PatientID", OtherKey="PatientId")]
		public EntitySet<tblVisit> tblVisits
		{
			get
			{
				return this._tblVisits;
			}
			set
			{
				this._tblVisits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPhysician_tblPatient", Storage="_tblPhysician", ThisKey="PrescriberID", OtherKey="PrescriberID", IsForeignKey=true)]
		public tblPhysician tblPhysician
		{
			get
			{
				return this._tblPhysician.Entity;
			}
			set
			{
				tblPhysician previousValue = this._tblPhysician.Entity;
				if (((previousValue != value) 
							|| (this._tblPhysician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPhysician.Entity = null;
						previousValue.tblPatients.Remove(this);
					}
					this._tblPhysician.Entity = value;
					if ((value != null))
					{
						value.tblPatients.Add(this);
						this._PrescriberID = value.PrescriberID;
					}
					else
					{
						this._PrescriberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblPhysician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblVisits(tblVisit entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = this;
		}
		
		private void detach_tblVisits(tblVisit entity)
		{
			this.SendPropertyChanging();
			entity.tblPatient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPhysician")]
	public partial class tblPhysician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriberID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Specialty;
		
		private EntitySet<tblPatient> _tblPatients;
		
		private EntitySet<tblVisit> _tblVisits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriberIDChanging(int value);
    partial void OnPrescriberIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSpecialtyChanging(string value);
    partial void OnSpecialtyChanged();
    #endregion
		
		public tblPhysician()
		{
			this._tblPatients = new EntitySet<tblPatient>(new Action<tblPatient>(this.attach_tblPatients), new Action<tblPatient>(this.detach_tblPatients));
			this._tblVisits = new EntitySet<tblVisit>(new Action<tblVisit>(this.attach_tblVisits), new Action<tblVisit>(this.detach_tblVisits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrescriberID
		{
			get
			{
				return this._PrescriberID;
			}
			set
			{
				if ((this._PrescriberID != value))
				{
					this.OnPrescriberIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriberID = value;
					this.SendPropertyChanged("PrescriberID");
					this.OnPrescriberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(15)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialty", DbType="VarChar(2)")]
		public string Specialty
		{
			get
			{
				return this._Specialty;
			}
			set
			{
				if ((this._Specialty != value))
				{
					this.OnSpecialtyChanging(value);
					this.SendPropertyChanging();
					this._Specialty = value;
					this.SendPropertyChanged("Specialty");
					this.OnSpecialtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPhysician_tblPatient", Storage="_tblPatients", ThisKey="PrescriberID", OtherKey="PrescriberID")]
		public EntitySet<tblPatient> tblPatients
		{
			get
			{
				return this._tblPatients;
			}
			set
			{
				this._tblPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPhysician_tblVisit", Storage="_tblVisits", ThisKey="PrescriberID", OtherKey="PhysicianId")]
		public EntitySet<tblVisit> tblVisits
		{
			get
			{
				return this._tblVisits;
			}
			set
			{
				this._tblVisits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPatients(tblPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblPhysician = this;
		}
		
		private void detach_tblPatients(tblPatient entity)
		{
			this.SendPropertyChanging();
			entity.tblPhysician = null;
		}
		
		private void attach_tblVisits(tblVisit entity)
		{
			this.SendPropertyChanging();
			entity.tblPhysician = this;
		}
		
		private void detach_tblVisits(tblVisit entity)
		{
			this.SendPropertyChanging();
			entity.tblPhysician = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblQualityControl")]
	public partial class tblQualityControl
	{
		
		private int _DocumentId;
		
		private string _QCName;
		
		private System.Nullable<System.DateTime> _QCDate;
		
		private bool _QCComplete;
		
		private string _QCStation;
		
		public tblQualityControl()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentId", DbType="Int NOT NULL")]
		public int DocumentId
		{
			get
			{
				return this._DocumentId;
			}
			set
			{
				if ((this._DocumentId != value))
				{
					this._DocumentId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QCName", DbType="VarChar(50)")]
		public string QCName
		{
			get
			{
				return this._QCName;
			}
			set
			{
				if ((this._QCName != value))
				{
					this._QCName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QCDate", DbType="Date")]
		public System.Nullable<System.DateTime> QCDate
		{
			get
			{
				return this._QCDate;
			}
			set
			{
				if ((this._QCDate != value))
				{
					this._QCDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QCComplete", DbType="Bit NOT NULL")]
		public bool QCComplete
		{
			get
			{
				return this._QCComplete;
			}
			set
			{
				if ((this._QCComplete != value))
				{
					this._QCComplete = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QCStation", DbType="VarChar(50)")]
		public string QCStation
		{
			get
			{
				return this._QCStation;
			}
			set
			{
				if ((this._QCStation != value))
				{
					this._QCStation = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblVisits")]
	public partial class tblVisit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PatientId;
		
		private int _PhysicianId;
		
		private System.DateTime _Date;
		
		private EntitySet<tblDocument> _tblDocuments;
		
		private EntityRef<tblPatient> _tblPatient;
		
		private EntityRef<tblPhysician> _tblPhysician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnPhysicianIdChanging(int value);
    partial void OnPhysicianIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public tblVisit()
		{
			this._tblDocuments = new EntitySet<tblDocument>(new Action<tblDocument>(this.attach_tblDocuments), new Action<tblDocument>(this.detach_tblDocuments));
			this._tblPatient = default(EntityRef<tblPatient>);
			this._tblPhysician = default(EntityRef<tblPhysician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._tblPatient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicianId", DbType="Int NOT NULL")]
		public int PhysicianId
		{
			get
			{
				return this._PhysicianId;
			}
			set
			{
				if ((this._PhysicianId != value))
				{
					if (this._tblPhysician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianIdChanging(value);
					this.SendPropertyChanging();
					this._PhysicianId = value;
					this.SendPropertyChanged("PhysicianId");
					this.OnPhysicianIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVisit_tblDocument", Storage="_tblDocuments", ThisKey="Id", OtherKey="VisitId")]
		public EntitySet<tblDocument> tblDocuments
		{
			get
			{
				return this._tblDocuments;
			}
			set
			{
				this._tblDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPatient_tblVisit", Storage="_tblPatient", ThisKey="PatientId", OtherKey="PatientID", IsForeignKey=true)]
		public tblPatient tblPatient
		{
			get
			{
				return this._tblPatient.Entity;
			}
			set
			{
				tblPatient previousValue = this._tblPatient.Entity;
				if (((previousValue != value) 
							|| (this._tblPatient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPatient.Entity = null;
						previousValue.tblVisits.Remove(this);
					}
					this._tblPatient.Entity = value;
					if ((value != null))
					{
						value.tblVisits.Add(this);
						this._PatientId = value.PatientID;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("tblPatient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPhysician_tblVisit", Storage="_tblPhysician", ThisKey="PhysicianId", OtherKey="PrescriberID", IsForeignKey=true)]
		public tblPhysician tblPhysician
		{
			get
			{
				return this._tblPhysician.Entity;
			}
			set
			{
				tblPhysician previousValue = this._tblPhysician.Entity;
				if (((previousValue != value) 
							|| (this._tblPhysician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPhysician.Entity = null;
						previousValue.tblVisits.Remove(this);
					}
					this._tblPhysician.Entity = value;
					if ((value != null))
					{
						value.tblVisits.Add(this);
						this._PhysicianId = value.PrescriberID;
					}
					else
					{
						this._PhysicianId = default(int);
					}
					this.SendPropertyChanged("tblPhysician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblDocuments(tblDocument entity)
		{
			this.SendPropertyChanging();
			entity.tblVisit = this;
		}
		
		private void detach_tblDocuments(tblDocument entity)
		{
			this.SendPropertyChanging();
			entity.tblVisit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tlbDocumentType")]
	public partial class tlbDocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private EntitySet<tblDocument> _tblDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public tlbDocumentType()
		{
			this._tblDocuments = new EntitySet<tblDocument>(new Action<tblDocument>(this.attach_tblDocuments), new Action<tblDocument>(this.detach_tblDocuments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tlbDocumentType_tblDocument", Storage="_tblDocuments", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<tblDocument> tblDocuments
		{
			get
			{
				return this._tblDocuments;
			}
			set
			{
				this._tblDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblDocuments(tblDocument entity)
		{
			this.SendPropertyChanging();
			entity.tlbDocumentType = this;
		}
		
		private void detach_tblDocuments(tblDocument entity)
		{
			this.SendPropertyChanging();
			entity.tlbDocumentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDocuments")]
	public partial class tblDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _VisitId;
		
		private string _ChartId;
		
		private string _Name;
		
		private string _Description;
		
		private string _ServerPath;
		
		private string _ServerName;
		
		private System.Nullable<int> _TypeId;
		
		private System.Nullable<System.DateTime> _DocumentDate;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<tblVisit> _tblVisit;
		
		private EntityRef<tlbDocumentType> _tlbDocumentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVisitIdChanging(System.Nullable<int> value);
    partial void OnVisitIdChanged();
    partial void OnChartIdChanging(string value);
    partial void OnChartIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnServerPathChanging(string value);
    partial void OnServerPathChanged();
    partial void OnServerNameChanging(string value);
    partial void OnServerNameChanged();
    partial void OnTypeIdChanging(System.Nullable<int> value);
    partial void OnTypeIdChanged();
    partial void OnDocumentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocumentDateChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public tblDocument()
		{
			this._tblVisit = default(EntityRef<tblVisit>);
			this._tlbDocumentType = default(EntityRef<tlbDocumentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> VisitId
		{
			get
			{
				return this._VisitId;
			}
			set
			{
				if ((this._VisitId != value))
				{
					if (this._tblVisit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIdChanging(value);
					this.SendPropertyChanging();
					this._VisitId = value;
					this.SendPropertyChanged("VisitId");
					this.OnVisitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartId", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ChartId
		{
			get
			{
				return this._ChartId;
			}
			set
			{
				if ((this._ChartId != value))
				{
					this.OnChartIdChanging(value);
					this.SendPropertyChanging();
					this._ChartId = value;
					this.SendPropertyChanged("ChartId");
					this.OnChartIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerPath", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ServerPath
		{
			get
			{
				return this._ServerPath;
			}
			set
			{
				if ((this._ServerPath != value))
				{
					this.OnServerPathChanging(value);
					this.SendPropertyChanging();
					this._ServerPath = value;
					this.SendPropertyChanged("ServerPath");
					this.OnServerPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					this.OnServerNameChanging(value);
					this.SendPropertyChanging();
					this._ServerName = value;
					this.SendPropertyChanged("ServerName");
					this.OnServerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._tlbDocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocumentDate
		{
			get
			{
				return this._DocumentDate;
			}
			set
			{
				if ((this._DocumentDate != value))
				{
					this.OnDocumentDateChanging(value);
					this.SendPropertyChanging();
					this._DocumentDate = value;
					this.SendPropertyChanged("DocumentDate");
					this.OnDocumentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblVisit_tblDocument", Storage="_tblVisit", ThisKey="VisitId", OtherKey="Id", IsForeignKey=true)]
		public tblVisit tblVisit
		{
			get
			{
				return this._tblVisit.Entity;
			}
			set
			{
				tblVisit previousValue = this._tblVisit.Entity;
				if (((previousValue != value) 
							|| (this._tblVisit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblVisit.Entity = null;
						previousValue.tblDocuments.Remove(this);
					}
					this._tblVisit.Entity = value;
					if ((value != null))
					{
						value.tblDocuments.Add(this);
						this._VisitId = value.Id;
					}
					else
					{
						this._VisitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblVisit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tlbDocumentType_tblDocument", Storage="_tlbDocumentType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public tlbDocumentType tlbDocumentType
		{
			get
			{
				return this._tlbDocumentType.Entity;
			}
			set
			{
				tlbDocumentType previousValue = this._tlbDocumentType.Entity;
				if (((previousValue != value) 
							|| (this._tlbDocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tlbDocumentType.Entity = null;
						previousValue.tblDocuments.Remove(this);
					}
					this._tlbDocumentType.Entity = value;
					if ((value != null))
					{
						value.tblDocuments.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tlbDocumentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblConfigPath")]
	public partial class tblConfigPath
	{
		
		private string _pathType;
		
		private string _value;
		
		public tblConfigPath()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pathType", DbType="VarChar(50)")]
		public string pathType
		{
			get
			{
				return this._pathType;
			}
			set
			{
				if ((this._pathType != value))
				{
					this._pathType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(50)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
